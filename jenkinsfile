  Yaml parser = new Yaml()

  def map = parser.load(("example.yaml" as File).text)

  def String repo

  def String version



  for ( e in map) {



  print "Key=${e.key}, value=${e.value}"



  def list="${e.value}"

  def String[] str

  str = list.split(',')

  for (String values : str ){

  values=values.replaceAll("[\\[\\]]","")

  println("\n Token value: ${values}\n")

  if ( values.contains('repo')){

	print "Extracting Repo\n"

	repo = values.split(':')[1]

	print "Repo: ${repo}"

	}

  if ( values.contains('version')){



	print "Extracting Version\n"

	version=values.split(':')[1]

	print "version:${version}\n"

	if ( version.contains('0.0')){

	print "version is need to create branch\n "
  sh " mkdir Repo "
  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'Repo'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '6e5c3081-96ac-4a13-9c02-5af7ea7bcabd', url:'git@gitlab-edge.eng.hitachivantara.com:pandora/shared/image_control.git']]])
  sshagent(['6e5c3081-96ac-4a13-9c02-5af7ea7bcabd']){
  sh " cd Repo && git checkout -b ${version} "
  sh " cd Repo && git push origin ${version} "
  sh " rm -Rf Repo "
  
	}

	else{

	print "Need to create tag\n"
  sh " mkdir Repo "
  checkout([$class: 'GitSCM', branches: [[name: "*/$master"]], extensions: [[$class: 'WipeWorkspace']], userRemoteConfigs: [[credentialsId: '6e5c3081-96ac-4a13-9c02-5af7ea7bcabd', url: 'git@gitlab-edge.eng.hitachivantara.com:pandora/shared/image_control.git']]])
  sshagent(['6e5c3081-96ac-4a13-9c02-5af7ea7bcabd']){
  sh " cd Repo && git tag -a ${version} -m '${version}' "
  sh " cd Repo && git push origin ${version} "
  sh " rm -Rf Repo "

	}

}

}

}
